(()=>{"use strict";var __webpack_modules__={300:(module,exports)=>{eval("\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports[\"default\"] = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;\n\n//# sourceURL=webpack://keyboard/./node_modules/node-fetch/browser.js?")},485:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/node-fetch/browser.js\nvar browser = __webpack_require__(300);\nvar browser_default = /*#__PURE__*/__webpack_require__.n(browser);\n;// CONCATENATED MODULE: ./src/components/keyboard/keyMap.js\n\n\nasync function keySetMain(){\n    const url = "https://opensheet.elk.sh/10DId3PsrfSAyKLMCOT60f-7nNOBnH1GV-gzfZbM3xGg/main"\n    const response = await browser_default()(url);\n    const Map = await response.json();\n    const keyMap = {}\n    Map.forEach(element => {\n        keyMap[element.Code] = element\n    });\n    keyMap.Equal.Eng ="="\n    keyMap.Equal.EngValue ="="\n    keyMap.Equal.ShiftEng ="+"\n    keyMap.Equal.ShiftEngValue ="+"\n    keyMap.Equal.Rus ="="\n    keyMap.Equal.RusValue ="="\n    keyMap.Equal.ShiftRus ="+"\n    keyMap.Equal.ShiftRusValue ="+"\n    return keyMap\n}\nasync function keySetArrow(){\n    const url = "https://opensheet.elk.sh/10DId3PsrfSAyKLMCOT60f-7nNOBnH1GV-gzfZbM3xGg/arrow"\n    const response = await browser_default()(url);\n    const Map = await response.json();\n    const keyMap = {}\n    Map.forEach(element => {\n        keyMap[element.Code] = element\n    });\n    return keyMap\n}\n\n\n    \n//, keySetArrow\n;// CONCATENATED MODULE: ./src/components/keyboard/key.js\n\n\nclass Key{\n    constructor(obj){}\n    build(obj){\n        let key = document.createElement("div");\n        key.classList.add("key");\n        key.style.width = obj.Width;\n        key.id = obj.Code\n        for (let en in obj){\n            key.dataset[en] = typeof(obj[en]) === "undefined" ? "" : obj[en]\n            key.innerText = obj.Eng\n            key.dataset.mode = "Eng"\n            key.dataset.value = obj["EngValue"]\n        }\n        return key\n    }\n}\n\n;// CONCATENATED MODULE: ./src/components/keyboard/renderKeyboard.js\n\n\n\nconst keyContainer = document.createElement("div")\nkeyContainer.classList.add("keyboard-container")\n\nlet buttonSet = {}\nasync function renderDefaultKeyboard(){\n    // draw all basic buttons \n    const buttonSetMain = await renderButtons(keySetMain)\n    // console.log("buttonSetMain")\n\n    // make round border for 4  end elements\n    makeEndsRound(buttonSetMain)\n\n    // append buttons to conteiner\n    appendButtons(buttonSetMain,keyContainer)\n    \n    \n    // draw arrow buttons \n    const buttonSetArrow = await renderButtons(keySetArrow)\n\n    // transform arrow buttons to fit the its container\n    fitArrowButtons(buttonSetArrow)\n\n    // create grid container for Arrow block buttons\n    const arrowBlockContainer = await addArrowContainer()\n\n    //append arrow buttons in container\n    appendButtons(buttonSetArrow,arrowBlockContainer)\n    \n\n    buttonSet = {...buttonSetMain,...buttonSetArrow}\n    return keyContainer\n}\nasync function renderButtons(keySet){\n    const Map = await keySet()\n    for (let el in Map){\n        let button = new Key().build(Map[el])\n        Map[el]=button\n    }\n    return Map\n}\nconst makeEndsRound = (buttonSet) => {\n    buttonSet["Escape"].style.borderTopLeftRadius = "16px"\n    buttonSet["sleep"].style.borderTopRightRadius = "16px"\n    buttonSet["fn"].style.borderBottomLeftRadius = "16px"\n}\nconst addArrowContainer = () => {\n    const arrowBlockContainer = document.createElement("div")\n    arrowBlockContainer.classList.add("arrow-block")\n    keyContainer.append(arrowBlockContainer)\n    return arrowBlockContainer\n}\nasync function appendButtons(Map,container){\n    for (let el in Map){\n    container.append(Map[el])\n    }\n}\nconst fitArrowButtons = (buttonSet) => {\n    buttonSet["ArrowRight"].style.borderBottomRightRadius = "16px"\n    buttonSet["ArrowUp"].style.height = "13px"\n    buttonSet["ArrowDown"].style.height = "13px"\n    buttonSet["ArrowLeft"].style.gridArea = "1/1/3/2"\n    buttonSet["ArrowRight"].style.gridArea = "1/3/3/4"\n    buttonSet["ArrowUp"].style.gridArea =  "1/2/2/3"\n    buttonSet["ArrowUp"].classList.add("up-down-buttons")\n    buttonSet["ArrowDown"].style.gridArea = "2/2/3/4"\n    buttonSet["ArrowDown"].classList.add("up-down-buttons")\n}\n\n\n;// CONCATENATED MODULE: ./src/components/index.js\n\n\n// document wrapper\nconst windowContainer = document.createElement("div")\nwindowContainer.classList.add("window-wrapper")\n\n// Title\nconst title = document.createElement("h1")\ntitle.textContent = "RSS Виртуальная клавиатура"\n\n// input textarea\nconst components_textarea = document.createElement("textarea")\ncomponents_textarea.classList.add("input")\ncomponents_textarea.id = "textarea"\n// textarea.rows=10;\n\n// Text under keyboard\nconst messsage = document.createElement("h2")\nmesssage.textContent = "Для переключения языка нажми cmd+shift"\n\n\n// keyboard contaner\nconst keyboardContainer = document.createElement("div")\n\n\n// join blocks on page\nwindowContainer.append(title)\nwindowContainer.append(components_textarea)\nwindowContainer.append(keyboardContainer)\nwindowContainer.append(messsage)\naddKeyboard()\n\n\nasync function addKeyboard(mode){\n    const keyboard = await renderDefaultKeyboard(mode)\n    keyboardContainer.append(keyboard)\n}\n\nfunction Components() {\n    this.windowContainer = windowContainer \n    this.windowContainer.textarea = components_textarea\n}\nconst components = new Components()\n;// CONCATENATED MODULE: ./src/events/mouseEvents.js\n\n\n// add mouse click event\nconst clickEvents = function (){\n    document.addEventListener("mousedown",(e)=>mouseEvents_select(e))\n    document.addEventListener("mousedown",(e)=>tapSymbol(e))\n    document.addEventListener("pointerdown",(e)=>transitionEffect(e))\n    document.addEventListener("pointerup",(e)=>canselTransition(e))\n}\nconst mouseEvents_select = function(e){\n    if(e.target.className.includes("key")&& !e.target.className.includes("keyboard-container")){\n        document.addEventListener("mousedown",(e)=>e.preventDefault())\n    }\n    if(e.target.className.includes("input")){\n        document.getElementById("textarea").focus()\n    }\n}\nconst  tapSymbol = function(e){\n    if(e.target.className.includes("key")&& !e.target.className.includes("keyboard-container")){\n        let actualText = components.windowContainer.textarea.value\n        let element = e.target\n        let mode = element.dataset.mode\n        console.log(element.dataset[`Shift${mode}Value`])\n        components.windowContainer.textarea.value = actualText+element.dataset.value\n    }\n}\nconst transitionEffect = function(e){\n    if(e.target.className.includes("key")&& !e.target.className.includes("keyboard-container")){\n        e.target.classList.add("button-down")\n    }\n}\nconst canselTransition = function(e){\n    if(e.target.className.includes("key")&& !e.target.className.includes("keyboard-container")){\n        e.target.classList.remove("button-down")\n    }\n}\nfunction evaluateMouseEvents(){\n    clickEvents()\n}\n\n\n;// CONCATENATED MODULE: ./src/events/keyboardEvents.js\n\n\n\n\nconst charArr = new Set\nconst mode = {true:"Eng",false:"Rus"}\nlet isEng = true\n\nconst events = function(){\n    document.addEventListener("keydown",(e)=>e.preventDefault())\n    document.addEventListener("keydown",(e)=>keyPress(e))\n    document.addEventListener("keyup",(e)=>keyUnpressed(e))\n}\n\nconst keyPress = function(e){\n    //get code of pressed button\n    let element = document.getElementById(e.code)\n        charArr.add(e.code)\n    // desing of tapping button\n    keyCss(element)\n    //add text in textarea\n    KeyboardProcessor(e.code,element,e)\n    \n}\nconst keyCss = function(element){\n    element.classList.add("key-down")\n    element.classList.add("button-down")\n}\n\nconst keyUnpressed = function(e){\n    charArr.delete(e.code)\n    if(e.code === "MetaLeft" || e.code === "MetaRight"){\n        for(let el in buttonSet){\n            buttonSet[el].classList.remove("key-down")\n            buttonSet[el].classList.remove("button-down")\n        }\n        charArr.clear()\n    }\n    try{\n        let element = document.getElementById(e.code)\n        let key = e.code\n        \n        element.classList.remove("key-down")\n        element.classList.remove("button-down")\n        if( key === "ShiftLeft"|| key == "ShiftRight"){\n        keyboardMode(mode[isEng])\n        }\n    }catch(error){console.log(error)}\n}\nconst KeyboardProcessor = function(key,element,e){\n    if(charArr.has("MetaLeft")&&charArr.has("ShiftLeft")){\n        isEng = !isEng\n        console.log(mode.isEng)\n    }\n    else if(charArr.has("Backspace")){\n        let actualText = components.windowContainer.textarea.value\n        console.log(typeof(actualText))\n        // if(window.getSelection){\n            window.getSelection().deleteFromDocument()\n\n        // }\n        components.windowContainer.textarea.value = actualText.slice(0,-1)\n        \n    }\n    else if(charArr.has("Backspace")&&charArr.has("MetaLeft")){}\n    else if(charArr.has("ShiftLeft")||charArr.has("ShiftRight")){\n        keyboardMode(`Shift${mode[isEng]}`)\n        let actualText = components.windowContainer.textarea.value\n        components.windowContainer.textarea.value = actualText+element.dataset[`Shift${mode[isEng]}Value`]\n    }\n    else{\n        let actualText = components.windowContainer.textarea.value\n        components.windowContainer.textarea.value = actualText+element.dataset.value\n    }\n}\n\nconst keyboardMode = function(lang){\n    for (let en in buttonSet){\n        buttonSet[en].innerText = buttonSet[en].dataset[lang]\n        buttonSet[en].dataset.value = buttonSet[en].dataset[`${lang}Value`]\n    }\n}\n\n\n\nfunction evaluateKeyboardEvents(){\n    events()\n}\n\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n\n//generate web app\nfunction app(){\n    const body = document.body\n    body.append(components.windowContainer)\n    evaluateMouseEvents()\n    evaluateKeyboardEvents()\n}\napp()\n\n//# sourceURL=webpack://keyboard/./src/index.js_+_6_modules?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(n,{a:n}),n},__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n);var __webpack_exports__=__webpack_require__(485)})();